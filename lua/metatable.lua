---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wsail.
--- DateTime: 2019/6/26 17:40
---

mytable = {}         --普通表
mymetatable = {}     --原表

setmetatable(mytable,mymetatable)  --把mymetatable设置为mytable的元表


--mytable = setmetatable({},{})

--获取对象元表
getmetatable(mytable)


-- -index元方法
-- 当通过键来访问table时，如果这个键没有值，那么Lua就会寻找该table的metatable中的_index键。如果_index包含一个表格，Lua会在表格中查找相应的键
other = {foo = 3}
t = setmetatable({},{__index = other})
print(t.foo)
print(t.bar)


-- __newindex元方法用来对表更新，__index则用来对表访问
--当你给表一个缺少的索引赋值，解释器就会查找_newindex元方法；如果存在则调用这个函数而不进行赋值操作
mymetatable = {}
mytable = setmetatable({key1 = "value1"},{__newindex = mymetatable})
print(mytable.key1)
mytable.newkey = "新值2"
print(mytable.newkey,mymetatable.newkey)
mytable.key1 = "新值1"
print(mytable.key1,mymetatable.key1)


--为表添加操作符
-- 计算表中最大值，table.maxn在Lua5.2以上版本中已无法使用
-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数
function table_maxn(t)
    local mn = 0
    for k, v in pairs(t) do
        if mn < k then
            mn = k
        end
    end
    return mn
end

-- 两表相加操作
mytable = setmetatable({ 1, 2, 3 }, {
    __add = function(mytable, newtable)
        for i = 1, table_maxn(newtable) do
            table.insert(mytable, table_maxn(mytable)+1,newtable[i])
        end
        return mytable
    end
})

secondtable = {4,5,6}

mytable = mytable + secondtable
for k,v in ipairs(mytable) do
    print(k,v)
end


-- __call元方法在Lua调用一个值时调用。

function table_maxn(t)
    local mn = 0
    for k, v in pairs(t) do
        if mn<k then
            mn = k
        end
    end
    return mn
end

--__call定义元方法 ,在Lua调用一个值时调用
mytable = setmetatable({10},{
    __call = function(mytable,newtable)
        sum = 0
        for i = 1, table_maxn(mytable) do
            sum = sum + mytable[i]
        end
        for i = 1, table_maxn(newtable) do
            sum = sum + newtable[i]
        end
        return sum
    end
})
newtable = {10,20,30}
print(mytable(newtable))

--—__tostring元方法
mytable = setmetatable({10,20,30},{
    __tostring = function(mytable)
        sum = 0
        for k, v in pairs(mytable) do
            sum = sum + v
        end
        return "表所有元素的和为 "..sum
    end
})
print(mytable)
